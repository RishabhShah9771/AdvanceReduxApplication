{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create a Redux slice for the cart using createSlice from Redux Toolkit\nconst cartSlice = createSlice({\n  name: \"cart\",\n  // Name of the slice\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false\n  },\n  // Initial state of the cart\n  reducers: {\n    // Reducer to replace the entire cart (used for syncing with backend)\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity; // Set total quantity from payload\n      state.items = action.payload.items; // Set items array from payload\n    },\n    // Reducer to add an item to the cart\n    addItemToCart(state, action) {\n      const newItem = action.payload; // The item to add (from action payload)\n      // Find if the item already exists in the cart\n      const existingItem = (state.items || []).find(item => item.id === newItem.id);\n      state.totalQuantity++; // Increment total quantity\n      state.changed = true; // Mark cart as changed\n      if (!existingItem) {\n        // If item does not exist, add it to the cart\n        state.items.push({\n          id: newItem.id,\n          // Item ID\n          price: newItem.price,\n          // Item price\n          quantity: 1,\n          // Start with quantity 1\n          totalPrice: newItem.price,\n          // Total price for this item\n          name: newItem.title || newItem.name // Use title or name for display\n        });\n      } else {\n        // If item exists, increment its quantity and total price\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n    // Reducer to remove an item from the cart\n    removeItemFromCart(state, action) {\n      const id = action.payload; // ID of the item to remove\n      // Find the existing item in the cart\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--; // Decrement total quantity\n      state.changed = true; // Mark cart as changed\n      if (!existingItem) {\n        // If item does not exist, do nothing\n        return;\n      }\n      if (existingItem.quantity === 1) {\n        // If only one left, remove the item from the cart\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        // If more than one, decrement quantity and total price\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"sources":["/Users/rishabhshah/Downloads/React Projects/React Projects/AdvanceReduxProject/src/Store/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create a Redux slice for the cart using createSlice from Redux Toolkit\nconst cartSlice = createSlice({\n  name: \"cart\", // Name of the slice\n  initialState: { items: [], totalQuantity: 0, changed: false }, // Initial state of the cart\n  reducers: {\n    // Reducer to replace the entire cart (used for syncing with backend)\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity; // Set total quantity from payload\n      state.items = action.payload.items; // Set items array from payload\n    },\n    // Reducer to add an item to the cart\n    addItemToCart(state, action) {\n      const newItem = action.payload; // The item to add (from action payload)\n      // Find if the item already exists in the cart\n      const existingItem = (state.items || []).find(\n        (item) => item.id === newItem.id\n      );\n      state.totalQuantity++; // Increment total quantity\n      state.changed = true; // Mark cart as changed\n      if (!existingItem) {\n        // If item does not exist, add it to the cart\n        state.items.push({\n          id: newItem.id, // Item ID\n          price: newItem.price, // Item price\n          quantity: 1, // Start with quantity 1\n          totalPrice: newItem.price, // Total price for this item\n          name: newItem.title || newItem.name, // Use title or name for display\n        });\n      } else {\n        // If item exists, increment its quantity and total price\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n    // Reducer to remove an item from the cart\n    removeItemFromCart(state, action) {\n      const id = action.payload; // ID of the item to remove\n      // Find the existing item in the cart\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--; // Decrement total quantity\n      state.changed = true; // Mark cart as changed\n      if (!existingItem) {\n        // If item does not exist, do nothing\n        return;\n      }\n      if (existingItem.quantity === 1) {\n        // If only one left, remove the item from the cart\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        // If more than one, decrement quantity and total price\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EAAE;EACdC,YAAY,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,aAAa,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAM,CAAC;EAAE;EAC/DC,QAAQ,EAAE;IACR;IACAC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAACJ,aAAa,GAAGK,MAAM,CAACC,OAAO,CAACN,aAAa,CAAC,CAAC;MACpDI,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO,CAACP,KAAK,CAAC,CAAC;IACtC,CAAC;IACD;IACAQ,aAAaA,CAACH,KAAK,EAAEC,MAAM,EAAE;MAC3B,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAO,CAAC,CAAC;MAChC;MACA,MAAMG,YAAY,GAAG,CAACL,KAAK,CAACL,KAAK,IAAI,EAAE,EAAEW,IAAI,CAC1CC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAChC,CAAC;MACDR,KAAK,CAACJ,aAAa,EAAE,CAAC,CAAC;MACvBI,KAAK,CAACH,OAAO,GAAG,IAAI,CAAC,CAAC;MACtB,IAAI,CAACQ,YAAY,EAAE;QACjB;QACAL,KAAK,CAACL,KAAK,CAACc,IAAI,CAAC;UACfD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UAAE;UAChBE,KAAK,EAAEN,OAAO,CAACM,KAAK;UAAE;UACtBC,QAAQ,EAAE,CAAC;UAAE;UACbC,UAAU,EAAER,OAAO,CAACM,KAAK;UAAE;UAC3BjB,IAAI,EAAEW,OAAO,CAACS,KAAK,IAAIT,OAAO,CAACX,IAAI,CAAE;QACvC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAY,YAAY,CAACM,QAAQ,GAAGN,YAAY,CAACM,QAAQ,GAAG,CAAC;QACjDN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACK,KAAK;MACxE;IACF,CAAC;IACD;IACAI,kBAAkBA,CAACd,KAAK,EAAEC,MAAM,EAAE;MAChC,MAAMO,EAAE,GAAGP,MAAM,CAACC,OAAO,CAAC,CAAC;MAC3B;MACA,MAAMG,YAAY,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC/DR,KAAK,CAACJ,aAAa,EAAE,CAAC,CAAC;MACvBI,KAAK,CAACH,OAAO,GAAG,IAAI,CAAC,CAAC;MACtB,IAAI,CAACQ,YAAY,EAAE;QACjB;QACA;MACF;MACA,IAAIA,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAE;QAC/B;QACAX,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACoB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACL;QACAH,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACK,KAAK;MACxE;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMM,WAAW,GAAGxB,SAAS,CAACyB,OAAO;AAE5C,eAAezB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}