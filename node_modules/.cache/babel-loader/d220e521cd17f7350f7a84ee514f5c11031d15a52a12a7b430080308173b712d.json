{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create a slice for user interface state management using Redux Toolkit\nconst userInterfaceSlice = createSlice({\n  // Name of the slice\n  name: \"userInterface\",\n  // Initial state for the slice\n  initialState: {\n    cartIsVisible: false,\n    // Determines if the cart UI is visible\n    notification: null // Holds notification data (status, title, message)\n  },\n  // Reducers define how the state can be updated\n  reducers: {\n    // Toggles the visibility of the cart\n    toggle(state) {\n      state.cartIsVisible = !state.cartIsVisible;\n    },\n    // Sets the notification object with provided status, title, and message\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        // Notification status (e.g., 'success', 'error')\n        title: action.payload.title,\n        // Notification title\n        message: action.payload.message // Notification message\n      };\n    }\n  }\n});\nexport const uiActions = userInterfaceSlice.actions;\nexport default userInterfaceSlice;","map":{"version":3,"names":["createSlice","userInterfaceSlice","name","initialState","cartIsVisible","notification","reducers","toggle","state","showNotification","action","status","payload","title","message","uiActions","actions"],"sources":["/Users/rishabhshah/Downloads/React Projects/React Projects/AdvanceReduxProject/src/Store/uiSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Create a slice for user interface state management using Redux Toolkit\nconst userInterfaceSlice = createSlice({\n  // Name of the slice\n  name: \"userInterface\",\n  // Initial state for the slice\n  initialState: {\n    cartIsVisible: false, // Determines if the cart UI is visible\n    notification: null, // Holds notification data (status, title, message)\n  },\n  // Reducers define how the state can be updated\n  reducers: {\n    // Toggles the visibility of the cart\n    toggle(state) {\n      state.cartIsVisible = !state.cartIsVisible;\n    },\n    // Sets the notification object with provided status, title, and message\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status, // Notification status (e.g., 'success', 'error')\n        title: action.payload.title, // Notification title\n        message: action.payload.message, // Notification message\n      };\n    },\n  },\n});\n\nexport const uiActions = userInterfaceSlice.actions;\nexport default userInterfaceSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,kBAAkB,GAAGD,WAAW,CAAC;EACrC;EACAE,IAAI,EAAE,eAAe;EACrB;EACAC,YAAY,EAAE;IACZC,aAAa,EAAE,KAAK;IAAE;IACtBC,YAAY,EAAE,IAAI,CAAE;EACtB,CAAC;EACD;EACAC,QAAQ,EAAE;IACR;IACAC,MAAMA,CAACC,KAAK,EAAE;MACZA,KAAK,CAACJ,aAAa,GAAG,CAACI,KAAK,CAACJ,aAAa;IAC5C,CAAC;IACD;IACAK,gBAAgBA,CAACD,KAAK,EAAEE,MAAM,EAAE;MAC9BF,KAAK,CAACH,YAAY,GAAG;QACnBM,MAAM,EAAED,MAAM,CAACE,OAAO,CAACD,MAAM;QAAE;QAC/BE,KAAK,EAAEH,MAAM,CAACE,OAAO,CAACC,KAAK;QAAE;QAC7BC,OAAO,EAAEJ,MAAM,CAACE,OAAO,CAACE,OAAO,CAAE;MACnC,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGd,kBAAkB,CAACe,OAAO;AACnD,eAAef,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}